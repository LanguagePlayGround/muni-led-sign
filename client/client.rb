#!/usr/bin/ruby
# test

# Reads simple font files generated by scripts/genfont.pl, and renders text.
class SimpleFont
  def initialize(data)
    @glyphs = {}
    load_glyphs(data)
  end

  # Load more glyphs from data (as if generated by scripts/genfont.pl).
  # Supersedes previous glyphs on clash.
  def load_glyphs(data)
    lines = data.split("\n")
    # Whether we're anticipating a header or a next line
    mode = :need_header
    # pointer to the record we currently read
    write_to = nil
    lines.each do |line|
      line.chomp!
      if (mode == :need_header) and (m = /(\d+) (\d+) (\d+)/.match(line))
        write_to = {:shift_h => m[2].to_i, :shift_v => m[3].to_i}
        @glyphs[m[1].to_i] = write_to
        mode = :need_line
      elsif mode == :need_line
        if line.empty?
          mode = :need_header
        else
          write_to[:bitmap] ||= []
          write_to[:bitmap] << line.split('')
        end
      end
    end
  end

  # Render string given the max height above the baseline.  Returns rectangular
  # array, starting from top-left corner.
  # Opts: ignore_shift_h - whether to ignore shift_h read from the font.
  def render(string, height, opts = {})
    # We'll store, temporarily, bits in buf hash, where hash[[i,j]] is a bit i
    # points up, and j points right from the start of the baseline. 
    buf = {}
    width = 0
    # Technically, it should be String#split, but we don't support chars >127
    # anyway.
    string.each_byte do |c_code|
      glyph = @glyphs[c_code]
      add_shift_h = opts[:ignore_shift_h] ? 0 : glyph[:shift_h]
      glyph[:bitmap].each_with_index do |row, i|
        row.each_with_index do |bit, j|
          bit_row = (glyph[:shift_v] - 1) - i
          bit_col = width + j + add_shift_h
          buf[[bit_row, bit_col]] = bit
          #height = bit_row if height < bit_row
          raise "negative value for letter #{c_code}" if bit_row < 0
        end
        # Compute the new width.
      end
      width += (glyph[:bitmap][0] || []).length
      # Insert interval between letters.
      width += 1 + add_shift_h
    end
    # now render the final array
    result = []
    buf.each do |xy, bit|
      row = (height - 1) - xy[0]
      col = xy[1]
      result[row] ||= []
      result[row][col] = bit
    end
    # Fill nil-s with zeroes.
    result.map! do |row|
      expanded_row = row || []
      # Expand row up to width.
      if expanded_row.size < width
        expanded_row[width] = nil
        expanded_row.pop
      end
      # Replace nil-s in this row with zeroes.
      expanded_row.map{|bit| bit || 0}
    end
    return result
  end
end

class Array
  def zero_one
    map{|row| row.join('')}.join("\n")
  end
end

# Load generated font.
sf = SimpleFont.new(IO.read('client/font/7x7.simpleglyphs'))
# Load local, application-specific glyphs
sf.load_glyphs(IO.read('client/font/specific.simpleglyphs'))

require 'optparse'

require 'muni'
require_relative 'lib/enhanced_open3'

options = {
  :bad_timing => 13,
}
OptionParser.new do |opts|
  opts.banner = "Usage: client.rb --route F --direction inbound --stop 'Ferry Building'"

  opts.on('--route [ROUTE]', "Route to get predictions for") {|v| options[:route] = v}
  opts.on('--direction [inbound/outbound]', "Route direction") {|v| options[:direction] = v}
  opts.on('--stop [STOP_NAME]', "Stop to watch") {|v| options[:stop] = v}
  opts.on('--timing MINUTES', Integer, "Warn if distance is longer than this.") {|v| options[:bad_timing] = v}
end.parse!

def text(data)
  draw = ['/usr/bin/perl', 'client/lowlevel.pl', '--type=text']
  print = proc {|line| $stderr.puts line}
  EnhancedOpen3.open3_input_linewise(data, print, print, *draw)
end

def pic(data)
  draw = ['/usr/bin/perl', 'client/lowlevel.pl', '--type=pic']
  print = proc {|line| $stderr.puts line}
  EnhancedOpen3.open3_input_linewise(data, print, print, *draw)
end

# Returns array of predictions for this stop in UTC times.  in_out is 'inbound'
# for inbound routes, or 'outbound'
def get_arrival_times(route, stop, in_out)
  raise unless route and stop and in_out
  route_handler = Muni::Route.find(route)
  stop_handler = route_handler.send(in_out.to_sym).stop_at(stop)
  raise "Couldn't find stop: found '#{stop_handler.title}' for '#{stop}'" if
      stop != stop_handler.title
  return stop_handler.predictions.map(&:epochTime).map{|t| Time.at(t.to_i / 1000)}
end

arrival_times = get_arrival_times(options[:route], options[:stop], options[:direction])
puts arrival_times.inspect
predictions = arrival_times.map{|t| ((t - Time.now)/60).floor}

predictions_str = ''
prev = 0

for t in predictions do
  # 31 is a specific charater defined in specific.simpleglyphs
  predictions_str << "#{((t-prev) >= options[:bad_timing])? 128.chr : '-'}#{t}"
  prev = t
end

pic(sf.render("N#{predictions_str}", 8, :ignore_shift_h => true).zero_one)

